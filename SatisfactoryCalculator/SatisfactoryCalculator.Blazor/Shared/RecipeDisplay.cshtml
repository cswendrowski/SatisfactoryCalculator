@using Humanizer
@using SatisfactoryCalculator.Logic
@using SatisfactoryCalculator.Logic.Models

<div>
    <strong>@ItemName</strong>
    <p>Output: @Item.OutputPerMinuteString</p>
    <h3>Needs</h3>
    <h4>Total Machines:</h4>
    @foreach (var machine in MachineNeeds)
    {
        <p>@machine.Name</p>
    }
    <h4>Total Resources:</h4>
    @foreach (var resource in ResourceNeeds)
    {
        <p>@resource.Name</p>
    }
</div>

@functions {
    private string _itemName = "";
    public string ItemName
    {
        get
        {
            return _itemName;
        }
        set
        {
            _itemName = value;
            var name = (RecipeNames)Enum.Parse(typeof(RecipeNames), value.Dehumanize());
            Item = RecipeBook.GetRecipe(name);
            PopulateNeeds();
        }
    }

    Recipe Item { get; set; }

    List<string> Recipes { get; set; }

    List<NeedItem> MachineNeeds { get; set; }

    List<NeedItem> ResourceNeeds { get; set; }

    class NeedItem
    {
        public string Name { get; set; }

        public string Image { get; set; }
    }

    protected override async Task OnInitAsync()
    {
        Recipes = Enum.GetNames(typeof(RecipeNames))
               .Where(x => x != "Unset")
               .Select(x => x.Humanize().Transform(To.TitleCase))
               .ToList();
        ItemName = "Modular Frame";
    }

    void PopulateNeeds()
    {
        var needs = RecipeCalculator.CalculateRecipeNeeds(Item);

        MachineNeeds = new List<NeedItem>();
        ResourceNeeds = new List<NeedItem>();

        foreach (var machineNeed in needs.TotalMachineNeeds)
        {
            MachineNeeds.Add(new NeedItem
            {
                Name = $"{machineNeed.Key.Humanize().Transform(To.TitleCase)}: {machineNeed.Value}"
            });
        }
        foreach (var resourceNeed in needs.TotalResourceNeeds)
        {
            ResourceNeeds.Add(new NeedItem
            {
                Name = $"{resourceNeed.Key.Humanize().Transform(To.TitleCase)}: {resourceNeed.Value}"
            });
        }
    }
}
