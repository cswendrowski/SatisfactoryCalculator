@using Humanizer
@using SatisfactoryCalculator.Logic
@using SatisfactoryCalculator.Logic.Models
@using System.Threading


<hr />

<div style="padding-top: 15px;">
    <select class="form-control" bind="@ItemName">
        <option value="">-- Select Recipe --</option>
        @foreach (var item in Recipes)
        {
            <option value="@item">@item</option>
        }
    </select>
    <input type="number" bind="@AmountToLoad" />
    <button class="btn btn-primary" onclick="@LoadFuel">Load Fuel</button>
    <p style="padding-top: 10px;">@Amount Loaded out of @Item.StackSize maxiumum</p>
    <p style="padding-top: 5px;"><b>@Item.GetRemainingSeconds(Amount) Seconds until empty</b></p>
</div>

@functions {
    private int Amount = 0;
    private int AmountToLoad = 0;
    private Timer Timer;
    private string _itemName = "";
    public string ItemName
    {
        get
        {
            return _itemName;
        }
        set
        {
            _itemName = value;
            var name = (FuelNames)Enum.Parse(typeof(FuelNames), value.Dehumanize());
            Item = FuelBook.GetRecipe(name);
            Timer.Change(TimeSpan.FromSeconds(Item.BurnTimeInSeconds), TimeSpan.FromSeconds(Item.BurnTimeInSeconds));
        }
    }

    Fuel Item { get; set; }

    List<string> Recipes { get; set; }

    protected override async Task OnInitAsync()
    {
        Recipes = Enum.GetNames(typeof(FuelNames))
               .Where(x => x != "Unset")
               .Select(x => x.Humanize().Transform(To.TitleCase))
               .ToList();
        Timer = new Timer(OnTimer);

        ItemName = "Leaves";
    }

    void LoadFuel()
    {
        Amount += AmountToLoad;
        if (Amount > Item.StackSize)
        {
            Amount = Item.StackSize;
        }
        this.StateHasChanged();
    }

    void OnTimer(object state)
    {
        if (Amount > 0)
        {
            Amount--;
            this.StateHasChanged();
        }
    }
}
